name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Run Ktlint
        run: ./gradlew ktlintCheck

      - name: Upload Detekt reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: detekt-reports
          path: |
            app/build/reports/detekt/
            build/reports/detekt/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29, 30, 34]
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Generate code coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-api-${{ matrix.api-level }}
          path: |
            app/build/test-results/testDebugUnitTest/
            app/build/reports/tests/testDebugUnitTest/

      - name: Upload coverage reports
        if: matrix.api-level == 34
        uses: codecov/codecov-action@v3
        with:
          file: ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run Android Emulator Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedDebugAndroidTest

      - name: Upload Android test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-test-results-api-${{ matrix.api-level }}
          path: |
            app/build/outputs/androidTest-results/
            app/build/reports/androidTests/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze || true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: app/build/reports/dependency-check-report.html

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    strategy:
      matrix:
        build-type: [debug, release]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build ${{ matrix.build-type }} APK
        run: |
          if [ "${{ matrix.build-type }}" = "release" ]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ matrix.build-type }}-${{ github.run_number }}
          path: |
            app/build/outputs/apk/${{ matrix.build-type }}/*.apk
            app/build/outputs/mapping/${{ matrix.build-type }}/

      - name: Get APK size
        run: |
          APK_SIZE=$(stat -c%s app/build/outputs/apk/${{ matrix.build-type }}/*.apk | head -1)
          APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
          echo "APK size: ${APK_SIZE_MB}MB"
          if [ $APK_SIZE_MB -gt 10 ]; then
            echo "⚠️ APK size (${APK_SIZE_MB}MB) exceeds 10MB limit"
            exit 1
          fi

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Measure build time
        run: |
          start_time=$(date +%s)
          ./gradlew assembleDebug
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Build time: ${build_time} seconds"
          if [ $build_time -gt 300 ]; then
            echo "⚠️ Build time (${build_time}s) exceeds 5 minutes"
            exit 1
          fi

  deploy:
    name: Deploy to GitHub Releases
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan, build, performance-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release APK
        uses: actions/download-artifact@v3
        with:
          name: app-release-${{ github.run_number }}
          path: ./artifacts/

      - name: Create changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/app-release.apk
          asset_name: TodoApp-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan, build, performance-test]
    if: always()

    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All checks passed!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some checks failed" >> $GITHUB_OUTPUT
          fi

      - name: Create status check
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ steps.status.outputs.status }}',
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
              description: '${{ steps.status.outputs.message }}',
              context: 'CI/CD Pipeline'
            });

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
                return ageInDays > 7; // Keep artifacts for 7 days
              });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
